[
  {
    "objectID": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_a.html",
    "href": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_a.html",
    "title": "Hands-on 1.a: Geospatial Data Science with R",
    "section": "",
    "text": "The learning objectives of this hands-on exercise are as followed:\n\nimporting geospatial data by using appropriate functions of sf package,\nimporting aspatial data by using appropriate function of readr package,\nexploring the content of simple feature data frame by using appropriate Base R and sf functions,\nassigning or transforming coordinate systems by using using appropriate sf functions,\nconverting an aspatial data into a sf data frame by using appropriate function of sfpackage,\nperforming geoprocessing tasks by using appropriate functions of sf package,\nperforming data wrangling tasks by using appropriate functions of dplyr package and\nperforming Exploratory Data Analysis (EDA) by using appropriate functions from ggplot2 package."
  },
  {
    "objectID": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_a.html#learning-objective",
    "href": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_a.html#learning-objective",
    "title": "Hands-on 1.a: Geospatial Data Science with R",
    "section": "",
    "text": "The learning objectives of this hands-on exercise are as followed:\n\nimporting geospatial data by using appropriate functions of sf package,\nimporting aspatial data by using appropriate function of readr package,\nexploring the content of simple feature data frame by using appropriate Base R and sf functions,\nassigning or transforming coordinate systems by using using appropriate sf functions,\nconverting an aspatial data into a sf data frame by using appropriate function of sfpackage,\nperforming geoprocessing tasks by using appropriate functions of sf package,\nperforming data wrangling tasks by using appropriate functions of dplyr package and\nperforming Exploratory Data Analysis (EDA) by using appropriate functions from ggplot2 package."
  },
  {
    "objectID": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_a.html#importing-libraries",
    "href": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_a.html#importing-libraries",
    "title": "Hands-on 1.a: Geospatial Data Science with R",
    "section": "2 Importing Libraries",
    "text": "2 Importing Libraries\nFirst, we import tidyverse for data wrangling and sf for importing and processing geospatial data. tidyverse is a powerful tool, consisting of readr for importing data, tidyr for manipulating data, dplyr for transforming data and ggplot2 for visualization!\n\npacman::p_load(sf,tidyverse,knitr,ggrepel,DT)"
  },
  {
    "objectID": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_a.html#importing-geospatial-data",
    "href": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_a.html#importing-geospatial-data",
    "title": "Hands-on 1.a: Geospatial Data Science with R",
    "section": "3 Importing Geospatial Data",
    "text": "3 Importing Geospatial Data\nIn this section, we import the following geospatial data into R using st_read() of sf package:\n\nMP14_SUBZONE_WEB_PL, a polygon feature layer in ESRI shapefile format,\nCyclingPath, a line feature layer in ESRI shapefile format, and\nPreSchool, a point feature layer in kml file format.\n\n\n\n\n\n\n\nGeospatial vs Aspatial\n\n\n\n\nGeospatial data has a location reference, which is tied to earth’s surface, including longitude/latitude, shapefiles, map.\nAspatial data does not include explicit geographic location.It’s descriptive information (attributes) only, including restaurant name, population size and, etc.\n\n\n\n\n3.1 Importing polygon feature data in shapefile format\nWhen the input data is in shapefile format, two arguments will be used:\n\ndsn: define the data path\nlayer: provide the shapefile name (note that no extension such as .shp, .dbf, .prj and .shx are needed)\n\n\nImportGeometry: MPSZ\n\n\n\nmpsz = st_read(dsn = \"Data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP\",\n               layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/johsuan/johsuanh/ISSS626-GAA/Hands-on/Hands-on-Ex01/Data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThe message above reveals that the geospatial objects are multipolygon features. There are a total of 323 multipolygon features and 15 fields in mpsz simple feature data frame. mpsz is in svy21 projected coordinates systems. The bounding box provides the x extend and y extend of the data\n\n\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\n\nkable(head(mpsz))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOBJECTID\nSUBZONE_NO\nSUBZONE_N\nSUBZONE_C\nCA_IND\nPLN_AREA_N\nPLN_AREA_C\nREGION_N\nREGION_C\nINC_CRC\nFMEL_UPD_D\nX_ADDR\nY_ADDR\nSHAPE_Leng\nSHAPE_Area\ngeometry\n\n\n\n\n1\n1\nMARINA SOUTH\nMSSZ01\nY\nMARINA SOUTH\nMS\nCENTRAL REGION\nCR\n5ED7EB253F99252E\n2014-12-05\n31595.84\n29220.19\n5267.381\n1630379.3\nMULTIPOLYGON (((31495.56 30…\n\n\n2\n1\nPEARL’S HILL\nOTSZ01\nY\nOUTRAM\nOT\nCENTRAL REGION\nCR\n8C7149B9EB32EEFC\n2014-12-05\n28679.06\n29782.05\n3506.107\n559816.2\nMULTIPOLYGON (((29092.28 30…\n\n\n3\n3\nBOAT QUAY\nSRSZ03\nY\nSINGAPORE RIVER\nSR\nCENTRAL REGION\nCR\nC35FEFF02B13E0E5\n2014-12-05\n29654.96\n29974.66\n1740.926\n160807.5\nMULTIPOLYGON (((29932.33 29…\n\n\n4\n8\nHENDERSON HILL\nBMSZ08\nN\nBUKIT MERAH\nBM\nCENTRAL REGION\nCR\n3775D82C5DDBEFBD\n2014-12-05\n26782.83\n29933.77\n3313.625\n595428.9\nMULTIPOLYGON (((27131.28 30…\n\n\n5\n3\nREDHILL\nBMSZ03\nN\nBUKIT MERAH\nBM\nCENTRAL REGION\nCR\n85D9ABEF0A40678F\n2014-12-05\n26201.96\n30005.70\n2825.594\n387429.4\nMULTIPOLYGON (((26451.03 30…\n\n\n6\n7\nALEXANDRA HILL\nBMSZ07\nN\nBUKIT MERAH\nBM\nCENTRAL REGION\nCR\n9D286521EF5E3B59\n2014-12-05\n25358.82\n29991.38\n4428.913\n1030378.8\nMULTIPOLYGON (((25899.7 297…\n\n\n\n\n\n\n\n\n\n\n3.2 Importing polyline feature data in shapefile form\n\nImportGeometry: Cycling Path\n\n\nThe message below reveals that there are a total of 4651 features and 19 fields in cyclingpathsf data frame. The geospatial entities are capture in multilinestring object. Similar to the MP19_SUBZONE_WEB_PL shape file, this data set is in in svy21 projected coordinates system too.\n\ncyclingpath = st_read(dsn = \"Data/geospatial/CyclingPath_Apr2025\",\n               layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `/Users/johsuan/johsuanh/ISSS626-GAA/Hands-on/Hands-on-Ex01/Data/geospatial/CyclingPath_Apr2025' \n  using driver `ESRI Shapefile'\nSimple feature collection with 4651 features and 19 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11721.1 ymin: 27550.13 xmax: 42809.37 ymax: 49702.59\nProjected CRS: SVY21\n\n\n\n\n\nst_geometry(cyclingpath)\n\nGeometry set for 4651 features \nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11721.1 ymin: 27550.13 xmax: 42809.37 ymax: 49702.59\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\n\nkable(head(cyclingpath))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPATH_TYPE\nRD_CD\nLVL_NUM\nAGENCY_IMP\nAGENCY_MAI\nPLANNING_A\nGAZETTE_DA\nLAUNCH_DAT\nPATH_OWNER\nMISC\nPKG_REF\nSHAPE_LEN\nRD_CD_DESC\nPLANNING_1\nAGENCY_M_1\nAGENCY_I_1\nPATH_OWN_1\nLVL_NUM_DE\nPATH_TYPE_\ngeometry\n\n\n\n\nNA\nNA\n0\nNA\nNA\nNA\n2023-04-18\n2023-04-18\nNA\nNA\nNA\n18.732594\nTAMPINES AVENUE 4\nTAMPINES\nLand Transport Authority\nLand Transport Authority\nLand Transport Authority\nAt-grade\nShared Path\nMULTILINESTRING ((40128.23 …\n\n\nNA\nNA\n0\nNA\nNA\nNA\n2023-04-18\n2023-04-18\nNA\nNA\nNA\n94.469928\nPUNGGOL FIELD\nPUNGGOL\nLand Transport Authority\nLand Transport Authority\nLand Transport Authority\nAt-grade\nShared Path\nMULTILINESTRING ((35123.93 …\n\n\nNA\nNA\n0\nNA\nNA\nNA\n2023-04-18\n2023-04-18\nNA\nNA\nNA\n9.169593\nPUNGGOL FIELD\nPUNGGOL\nLand Transport Authority\nLand Transport Authority\nLand Transport Authority\nAt-grade\nShared Path\nMULTILINESTRING ((35088.86 …\n\n\nNA\nNA\n0\nNA\nNA\nNA\n2023-04-18\n2023-04-18\nNA\nNA\nNA\n51.320348\nPUNGGOL FIELD\nPUNGGOL\nLand Transport Authority\nLand Transport Authority\nLand Transport Authority\nAt-grade\nShared Path\nMULTILINESTRING ((35099.12 …\n\n\nNA\nNA\n0\nNA\nNA\nNA\n2023-04-18\n2023-04-18\nNA\nNA\nNA\n29.886053\nJURONG WEST STREET 42\nJURONG WEST\nLand Transport Authority\nLand Transport Authority\nLand Transport Authority\nAt-grade\nShared Path\nMULTILINESTRING ((16031.65 …\n\n\nNA\nNA\n0\nNA\nNA\nNA\n2023-04-18\n2023-04-18\nNA\nNA\nNA\n38.389498\nBOON LAY WAY\nJURONG WEST\nLand Transport Authority\nLand Transport Authority\nLand Transport Authority\nAt-grade\nShared Path\nMULTILINESTRING ((15538.04 …\n\n\n\n\n\n\n\n\n\n\n3.3 Importing GIS data in kml format\n\nImportGeometry: PreSchool Location\n\n\nThe message below reveals that preschool is a point feature data frame. There are a total of 2290 features and 2 fields. Different from the previous two simple feature data frame, preschool is in wgs84 coordinates system.\n\npreschool = st_read(dsn = \"Data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `/Users/johsuan/johsuanh/ISSS626-GAA/Hands-on/Hands-on-Ex01/Data/geospatial/PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\n\n\nst_geometry(preschool)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\n\nkable(head(preschool))\n\n\n\n\n\n\n\n\n\nName\nDescription\ngeometry\n\n\n\n\nkml_1\n\nPOINT Z (103.8072 1.299333 0)\n\n\nkml_2\n\nPOINT Z (103.826 1.312839 0)\n\n\nkml_3\n\nPOINT Z (103.8409 1.348843 0)\n\n\nkml_4\n\nPOINT Z (103.8048 1.435024 0)\n\n\nkml_5\n\nPOINT Z (103.839 1.33315 0)\n\n\nkml_6\n\nPOINT Z (103.8805 1.308027 0)"
  },
  {
    "objectID": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_a.html#plotting-geospatial-data",
    "href": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_a.html#plotting-geospatial-data",
    "title": "Hands-on 1.a: Geospatial Data Science with R",
    "section": "4 Plotting Geospatial Data",
    "text": "4 Plotting Geospatial Data\nIn geospatial data science, by looking at the feature information is not enough. We are also interested to visualise the geospatial features. This is the time you will find plot() of R Graphic comes in very handy as shown in the code chunk below.\n\npar(bg = \"#f6f6f6\")\nplot(mpsz)\n\n\n\n\n\n\n\n\nThe default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum as shown above. We can, however, choose to plot only the geometry by using the code chunk below.\n\npar(bg = \"#f6f6f6\")\nplot(st_geometry(mpsz))\n\n\n\n\n\n\n\n\nAlternatively, we can also choose the plot the sf object by using a specific attribute as shown in the code chunk below.\n\npar(bg = \"#f6f6f6\")\nplot(mpsz[\"CA_IND\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nplot() is appropriate for plotting the geospatial object for quick look. For high cartographic quality map, other R package such as tmap should be used.\n\n\nNow, let us plot the preschool layer ontop of the mpsz layer by using the code chunk below.\n\npar(bg = \"#f6f6f6\")\nplot(st_geometry(mpsz))\n# Since the CRS of preschool (WGS84) differs from that of mpsz (SVY21), we need to transform the CRS of preschool first\npreschool_2 &lt;- st_transform(preschool, st_crs(mpsz))\nplot(preschool_2[\"Name\"],add = TRUE)\n\n\n\n\n\n\n\n\n\n4.1 Handling Different Coordinate Reference Systems\nMap projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system.\n\n4.1.1 WGS84 vs SVY21\nGeographic CRS - WGS84\n\nUses latitude and longitude (angles, in degrees)\nEPSG:4326 (WGS84) → the most common global system (used in GPS)\nCoordinates look like 1.29, 103.85 (Singapore)\n\nProjected CRS - SVY21\n\nProjects the curved Earth onto a flat map. Units are usually in meters.\nEPSG:3414 (SVY21 / Singapore TM) → used for precise local mapping in Singapore\nCoordinates look like 28000, 38744 (same location, but in meters)\n\n\n\n\n4.2 Assigning EPSG code to a simple feature data frame\nOne of the common issue that can happen during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.\nThis is an example the coordinate system of mpsz simple feature data frame by using st_crs() of sf package as shown in the code chunk below.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nAlthough mpsz data frame is projected in svy21 but when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be 3414\nIn order to assign the correct EPSG code to mpsz data frame, st_set_crs() of sf package is used :\n\nmpsz &lt;- st_set_crs(mpsz,3414)\n\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNotice that the EPSG code is 3414 now.\n\n\n4.3 Transforming the projection of preschool from wgs84 to svy21\nIn geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.\nLet us perform the projection transformation wgs84 to svy21 by using the code chunk below.\n\npreschool &lt;- st_transform(preschool, crs = 3414)\n\nNext, let us display the content of preschool sf data frame as shown below.\n\nst_geometry(preschool)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nNotice that it is in svy21 projected coordinate system now.\nLet’s plot it again\n\npar(bg=\"#f6f6f6\")\nplot(st_geometry(mpsz))\nplot(st_geometry(preschool), add = TRUE)"
  },
  {
    "objectID": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_a.html#importing-and-converting-an-aspatial-data",
    "href": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_a.html#importing-and-converting-an-aspatial-data",
    "title": "Hands-on 1.a: Geospatial Data Science with R",
    "section": "5 Importing and Converting An Aspatial Data",
    "text": "5 Importing and Converting An Aspatial Data\nFor the purpose of this exercise, the listings.csv data downloaded from AirBnb will be used\n\n5.1 Importing Aspatial Data\n\nlistings &lt;- read_csv(\"Data/aspatial/listings.csv\")\n\n\nlist(listings)\n\n[[1]]\n# A tibble: 3,659 × 79\n       id listing_url            scrape_id last_scraped source name  description\n    &lt;dbl&gt; &lt;chr&gt;                      &lt;dbl&gt; &lt;date&gt;       &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;      \n 1  71609 https://www.airbnb.co…   2.03e13 2025-06-26   city … Ensu… For 3 room…\n 2  71896 https://www.airbnb.co…   2.03e13 2025-06-27   previ… B&B … &lt;NA&gt;       \n 3  71903 https://www.airbnb.co…   2.03e13 2025-06-27   city … Room… Like your …\n 4 275343 https://www.airbnb.co…   2.03e13 2025-06-26   previ… 10mi… **IMPORTAN…\n 5 275344 https://www.airbnb.co…   2.03e13 2025-06-27   previ… 15 m… Lovely hom…\n 6 294281 https://www.airbnb.co…   2.03e13 2025-06-30   city … 5 mi… I have 3 b…\n 7 324945 https://www.airbnb.co…   2.03e13 2025-06-27   previ… Comf… **IMPORTAN…\n 8 330095 https://www.airbnb.co…   2.03e13 2025-06-27   previ… Rela… **IMPORTAN…\n 9 344803 https://www.airbnb.co…   2.03e13 2025-06-25   city … Budg… Direct bus…\n10 369141 https://www.airbnb.co…   2.03e13 2025-06-26   city … 5min… A room in …\n# ℹ 3,649 more rows\n# ℹ 72 more variables: neighborhood_overview &lt;chr&gt;, picture_url &lt;chr&gt;,\n#   host_id &lt;dbl&gt;, host_url &lt;chr&gt;, host_name &lt;chr&gt;, host_since &lt;date&gt;,\n#   host_location &lt;chr&gt;, host_about &lt;chr&gt;, host_response_time &lt;chr&gt;,\n#   host_response_rate &lt;chr&gt;, host_acceptance_rate &lt;chr&gt;,\n#   host_is_superhost &lt;lgl&gt;, host_thumbnail_url &lt;chr&gt;, host_picture_url &lt;chr&gt;,\n#   host_neighbourhood &lt;chr&gt;, host_listings_count &lt;dbl&gt;, …\n\n\nThe output reveals that listing tibble data frame consists of 4252 rows and 16 columns. Two useful fields we are going to use in the next phase are latitude and longitude. Note that they are in decimal degree format. As a best guess, we will assume that the data is in wgs84 Geographic Coordinate System\n\n\n5.2 Creating a simple feature data frame from an aspatial data frame\nThe code chunk below converts listing data frame into a simple feature data frame by using st_as_sf() of sf packages:\n\nlistings_sf &lt;- st_as_sf(listings,\n                        coords = c(\"longitude\",\"latitude\"),\n                        crs=4326 ) %&gt;% #wgs84\nst_transform(crs=3414) #svy21\n\nThings to learn from the arguments above:\n\ncoords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\ncrs argument requires you to provide the coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System and EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by referring to epsg.io.\n\nLet us examine the content of this newly created simple feature data frame.\n\nglimpse(listings_sf)\n\nRows: 3,659\nColumns: 78\n$ id                                           &lt;dbl&gt; 71609, 71896, 71903, 2753…\n$ listing_url                                  &lt;chr&gt; \"https://www.airbnb.com/r…\n$ scrape_id                                    &lt;dbl&gt; 2.025063e+13, 2.025063e+1…\n$ last_scraped                                 &lt;date&gt; 2025-06-26, 2025-06-27, …\n$ source                                       &lt;chr&gt; \"city scrape\", \"previous …\n$ name                                         &lt;chr&gt; \"Ensuite Room (Room 1 & 2…\n$ description                                  &lt;chr&gt; \"For 3 rooms.Book room 1&…\n$ neighborhood_overview                        &lt;chr&gt; NA, NA, \"Quiet and view o…\n$ picture_url                                  &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_id                                      &lt;dbl&gt; 367042, 367042, 367042, 1…\n$ host_url                                     &lt;chr&gt; \"https://www.airbnb.com/u…\n$ host_name                                    &lt;chr&gt; \"Belinda\", \"Belinda\", \"Be…\n$ host_since                                   &lt;date&gt; 2011-01-29, 2011-01-29, …\n$ host_location                                &lt;chr&gt; \"Singapore\", \"Singapore\",…\n$ host_about                                   &lt;chr&gt; \"Hi My name is Belinda -H…\n$ host_response_time                           &lt;chr&gt; \"within an hour\", \"within…\n$ host_response_rate                           &lt;chr&gt; \"100%\", \"100%\", \"100%\", \"…\n$ host_acceptance_rate                         &lt;chr&gt; \"100%\", \"100%\", \"100%\", \"…\n$ host_is_superhost                            &lt;lgl&gt; FALSE, FALSE, FALSE, FALS…\n$ host_thumbnail_url                           &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_picture_url                             &lt;chr&gt; \"https://a0.muscache.com/…\n$ host_neighbourhood                           &lt;chr&gt; \"Tampines\", \"Tampines\", \"…\n$ host_listings_count                          &lt;dbl&gt; 5, 5, 5, 59, 59, 7, 59, 5…\n$ host_total_listings_count                    &lt;dbl&gt; 10, 10, 10, 88, 88, 8, 88…\n$ host_verifications                           &lt;chr&gt; \"['email', 'phone']\", \"['…\n$ host_has_profile_pic                         &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ host_identity_verified                       &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ neighbourhood                                &lt;chr&gt; NA, NA, \"Singapore, Singa…\n$ neighbourhood_cleansed                       &lt;chr&gt; \"Tampines\", \"Tampines\", \"…\n$ neighbourhood_group_cleansed                 &lt;chr&gt; \"East Region\", \"East Regi…\n$ property_type                                &lt;chr&gt; \"Private room in villa\", …\n$ room_type                                    &lt;chr&gt; \"Private room\", \"Private …\n$ accommodates                                 &lt;dbl&gt; 2, 1, 2, 1, 1, 2, 1, 1, 1…\n$ bathrooms                                    &lt;dbl&gt; 1.0, NA, 0.5, NA, NA, 1.0…\n$ bathrooms_text                               &lt;chr&gt; \"1 private bath\", \"Shared…\n$ bedrooms                                     &lt;dbl&gt; 2, NA, 1, NA, NA, 2, NA, …\n$ beds                                         &lt;dbl&gt; 3, NA, 2, NA, NA, 1, NA, …\n$ amenities                                    &lt;chr&gt; \"[\\\"Shampoo\\\", \\\"Fire pit…\n$ price                                        &lt;chr&gt; \"$143.00\", NA, \"$76.00\", …\n$ minimum_nights                               &lt;dbl&gt; 92, 92, 92, 180, 180, 92,…\n$ maximum_nights                               &lt;dbl&gt; 365, 365, 365, 999, 999, …\n$ minimum_minimum_nights                       &lt;dbl&gt; 92, 92, 92, 180, 180, 92,…\n$ maximum_minimum_nights                       &lt;dbl&gt; 92, 92, 92, 180, 180, 92,…\n$ minimum_maximum_nights                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ maximum_maximum_nights                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ minimum_nights_avg_ntm                       &lt;dbl&gt; 92, 92, 92, 180, 180, 92,…\n$ maximum_nights_avg_ntm                       &lt;dbl&gt; 1125, 1125, 1125, 1125, 1…\n$ calendar_updated                             &lt;lgl&gt; NA, NA, NA, NA, NA, NA, N…\n$ has_availability                             &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, T…\n$ availability_30                              &lt;dbl&gt; 30, 20, 30, 0, 0, 30, 0, …\n$ availability_60                              &lt;dbl&gt; 60, 49, 60, 24, 25, 60, 2…\n$ availability_90                              &lt;dbl&gt; 90, 79, 90, 54, 55, 90, 5…\n$ availability_365                             &lt;dbl&gt; 90, 79, 90, 153, 153, 365…\n$ calendar_last_scraped                        &lt;date&gt; 2025-06-26, 2025-06-27, …\n$ number_of_reviews                            &lt;dbl&gt; 19, 24, 46, 20, 16, 131, …\n$ number_of_reviews_ltm                        &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ number_of_reviews_l30d                       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ availability_eoy                             &lt;dbl&gt; 90, 79, 90, 153, 153, 185…\n$ number_of_reviews_ly                         &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ estimated_occupancy_l365d                    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ estimated_revenue_l365d                      &lt;dbl&gt; 0, NA, 0, NA, NA, 0, NA, …\n$ first_review                                 &lt;date&gt; 2011-12-19, 2011-07-30, …\n$ last_review                                  &lt;date&gt; 2020-01-17, 2019-10-13, …\n$ review_scores_rating                         &lt;dbl&gt; 4.44, 4.16, 4.41, 4.40, 4…\n$ review_scores_accuracy                       &lt;dbl&gt; 4.37, 4.22, 4.39, 4.16, 4…\n$ review_scores_cleanliness                    &lt;dbl&gt; 4.00, 4.09, 4.52, 4.26, 4…\n$ review_scores_checkin                        &lt;dbl&gt; 4.63, 4.43, 4.63, 4.47, 4…\n$ review_scores_communication                  &lt;dbl&gt; 4.78, 4.43, 4.64, 4.42, 4…\n$ review_scores_location                       &lt;dbl&gt; 4.26, 4.17, 4.50, 4.53, 4…\n$ review_scores_value                          &lt;dbl&gt; 4.32, 4.04, 4.36, 4.63, 4…\n$ license                                      &lt;chr&gt; NA, NA, NA, \"S0399\", \"S03…\n$ instant_bookable                             &lt;lgl&gt; FALSE, FALSE, FALSE, TRUE…\n$ calculated_host_listings_count               &lt;dbl&gt; 5, 5, 5, 58, 58, 7, 58, 5…\n$ calculated_host_listings_count_entire_homes  &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 0, 0, 0…\n$ calculated_host_listings_count_private_rooms &lt;dbl&gt; 5, 5, 5, 58, 58, 6, 58, 5…\n$ calculated_host_listings_count_shared_rooms  &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ reviews_per_month                            &lt;dbl&gt; 0.12, 0.14, 0.27, 0.13, 0…\n$ geometry                                     &lt;POINT [m]&gt; POINT (41972.5 3639…\n\n\nTable above shows the content of listing_sf. Notice that a new column called geometryhas been added into the data frame. On the other hand, the longitude and latitudecolumns have been dropped from the data frame."
  },
  {
    "objectID": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_a.html#plotting-aspatial-data",
    "href": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_a.html#plotting-aspatial-data",
    "title": "Hands-on 1.a: Geospatial Data Science with R",
    "section": "6. Plotting Aspatial data",
    "text": "6. Plotting Aspatial data\nFirstly, filter for the top five regions with the highest number of listings in Singapore using lengths() and st_intersects()\n\n# Add listing counts to mpsz\nmpsz$listings_count &lt;- lengths(st_intersects(mpsz, listings_sf)) #calculate how many airbnb falls in each polygon\n\n# Find top 5 regions\nTop_5_regions &lt;- mpsz %&gt;% top_n(5, listings_count)\nkable(Top_5_regions%&gt;%\n        arrange(desc(listings_count)))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOBJECTID\nSUBZONE_NO\nSUBZONE_N\nSUBZONE_C\nCA_IND\nPLN_AREA_N\nPLN_AREA_C\nREGION_N\nREGION_C\nINC_CRC\nFMEL_UPD_D\nX_ADDR\nY_ADDR\nSHAPE_Leng\nSHAPE_Area\nlistings_count\ngeometry\n\n\n\n\n36\n3\nCHINATOWN\nOTSZ03\nY\nOUTRAM\nOT\nCENTRAL REGION\nCR\n0FF1661344C84AED\n2014-12-05\n29153.97\n29158.04\n4297.600\n587222.7\n190\nMULTIPOLYGON (((29161.2 297…\n\n\n126\n6\nLAVENDER\nKLSZ06\nN\nKALLANG\nKL\nCENTRAL REGION\nCR\nA7A07F328A38B6EF\n2014-12-05\n30874.41\n32569.53\n3609.150\n757907.6\n178\nMULTIPOLYGON (((31389.56 32…\n\n\n47\n4\nOXLEY\nRVSZ04\nY\nRIVER VALLEY\nRV\nCENTRAL REGION\nCR\n5A22C0945D1794D2\n2014-12-05\n28802.36\n31053.67\n1989.487\n200052.7\n164\nMULTIPOLYGON (((28836.19 31…\n\n\n14\n5\nINSTITUTION HILL\nRVSZ05\nY\nRIVER VALLEY\nRV\nCENTRAL REGION\nCR\nC3C22D1EE31757BD\n2014-12-05\n28465.40\n30711.22\n2842.526\n392563.3\n160\nMULTIPOLYGON (((28481.45 30…\n\n\n163\n4\nALJUNIED\nGLSZ04\nN\nGEYLANG\nGL\nCENTRAL REGION\nCR\n83AFAB768B6B2B66\n2014-12-05\n33592.58\n32970.83\n7100.699\n2959367.6\n147\nMULTIPOLYGON (((34449.13 33…\n\n\n\n\n\nLet’s plot the airbnb listings in Chinatown, which has the highest number of listings in Singapore:\n\n# filter mpsz\nmpsz_chinatown &lt;- mpsz %&gt;%\n  filter(SUBZONE_N == \"CHINATOWN\")\n\n# filter listings in chinatown\nlistings_chinatown &lt;- st_filter(listings_sf, mpsz_chinatown, .predicate = st_within)\n\n# scale the price\nlistings_chinatown &lt;- listings_chinatown %&gt;%\n  mutate(\n    price_numeric = as.numeric(gsub(\"[^0-9\\\\.]\", \"\",price)),\n    max_price = max(price_numeric,na.rm=TRUE),\n    scaled_price = replace_na(price_numeric/max_price*3,0)\n  )\n\npar(bg=\"#f6f6f6\")\nplot(st_geometry(mpsz_chinatown), main = \"Airbnb Price in Chinatown\")\nplot(st_geometry(listings_chinatown), \n     add = TRUE,\n     lwd =0.5,\n     col = adjustcolor(\"black\", alpha.f = 1),\n     bg = adjustcolor(\"orange\", alpha.f = 0.5),\n     pch = 21,\n     cex = listings_chinatown$scaled_price)"
  },
  {
    "objectID": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_a.html#geoprocessing-with-sf-package",
    "href": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_a.html#geoprocessing-with-sf-package",
    "title": "Hands-on 1.a: Geospatial Data Science with R",
    "section": "7 Geoprocessing with sf package",
    "text": "7 Geoprocessing with sf package\nBesides providing functions to handling (i.e. importing, exporting, assigning projection, transforming projection etc) geospatial data, sf package also offers a wide range of geoprocessing (also known as GIS analysis) functions.\n\n7.1 Use case 1: Land acquisition analysis\n\n7.1.1 The scenario\nThe authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the existing cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.\n\n\n7.1.2 The solution\nFirstly, st_buffer() of sf package is used to compute the 5-meter buffers around cycling paths:\n\n\ncyclingpath &lt;- st_transform(cyclingpath, crs = 3414)\nbuffer_cycling &lt;- st_buffer(cyclingpath,\n                            dist = 5, nQuadSegs = 30) %&gt;%\n  mutate(AREA = st_area(geometry)) #calculating the area of the buffers\n\n\nsum(buffer_cycling$AREA)\n\n3561648 [m^2]\n\n\nWe can also create a plot showing the buffer by a selected planning subzone. Assuming that we are interested on the land acquisition in Tampines West planning subzone.\nFirst, filter the subzone:\n\nmpsz_selected &lt;- mpsz %&gt;%\n  filter(SUBZONE_N == \"TAMPINES WEST\")\n\nNext, select intersection of mpsz_selected and buffer_cycling using st_intersection() \n\nbuffer_cycling_selected &lt;- st_intersection(\n  st_geometry(buffer_cycling), \n  st_geometry(mpsz_selected)\n)\n\nLastly, plot() of R Graphic will be used to create the plot as shown below:\n\npar(bg=\"#f6f6f6\")\nplot(st_geometry(mpsz_selected),main = \"Cycling Buffer in Tampines West\")\nplot(st_geometry(buffer_cycling_selected), \n     col=NA, border =\"#8EB859\", lwd = 0.5,\n     add = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n7.2 Use case 2: Determine the number of pre-schools by planning subzone\n\n7.2.1 The scenario\nThe authority requires a count of pre-schools for each planning subzone to support forward planning. Using R and the sf package, perform the necessary geoprocessing to compute these counts and present the results clearly.\n\n\n7.2.2 The solution\nThe code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using st_intersects(). Next, lengths() of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.\n\nmpsz &lt;- mpsz %&gt;%\n  mutate(preschool_count = lengths(st_intersects(mpsz,preschool)))\n\nNote!! st_intersects() and st_intersections() are different. Additionally, lengths() and length() are also different!\n\n\n\n\n\n\nst_intersects() vs. st_intersections()\n\n\n\nst_intersects()\n\nPurpose: Returns which geometries intersect with which.\nOutput: A list of integer vectors, where each element represents the indices of intersecting geometries.\nUse Case: Logical testing / filtering\n\nst_intersections()\n\nPurpose: Returns the actual geometries of the intersections (i.e., the intersection shapes themselves).\nOutput: a new sf object (like points, lines, or polygons) representing the overlapping areas\nUse Case: Creating new geometries / overlays\n\n\n\n\n\n\n\n\n\nlength() vs. lengths()\n\n\n\nlength()\n\nReturns the length of the object itself.\nFor a list, it tells how many elements are in the list.\nex. length(list(1, 2:3, 4:6)) # returns 3\n\nlengths(x)\n\nReturns the length of each element inside a list.\nUseful when each element is a vector of different length.\nex. lengths(list(1, 2:3, 4:6)) # returns c(1, 2, 3)\n\n\n\nBelow we check the summary statistics of the newly derived “preschool_count”, the max of preschool_count is 72 while the min is 0.\n\nsummary(mpsz$preschool_count)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\nTo list the planning subzone with the most number of pre-school, the top_n() of dplyr package is used as shown in the code chunk below.\nTampines East leads with 72 preschools, followed by Woodlands East with 54. Among the top 10 subzones, six belong to the East region.\n\nkable(mpsz %&gt;% \n        top_n(10,preschool_count) %&gt;%\n        arrange(desc(preschool_count)))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOBJECTID\nSUBZONE_NO\nSUBZONE_N\nSUBZONE_C\nCA_IND\nPLN_AREA_N\nPLN_AREA_C\nREGION_N\nREGION_C\nINC_CRC\nFMEL_UPD_D\nX_ADDR\nY_ADDR\nSHAPE_Leng\nSHAPE_Area\nlistings_count\npreschool_count\ngeometry\n\n\n\n\n189\n2\nTAMPINES EAST\nTMSZ02\nN\nTAMPINES\nTM\nEAST REGION\nER\n21658EAAF84F4D8D\n2014-12-05\n41122.55\n37392.39\n10180.624\n4339824\n1\n72\nMULTIPOLYGON (((42196.76 38…\n\n\n290\n3\nWOODLANDS EAST\nWDSZ03\nN\nWOODLANDS\nWD\nNORTH REGION\nNR\nC90769E43EE6B0F2\n2014-12-05\n24506.64\n46991.63\n6603.608\n2553464\n10\n54\nMULTIPOLYGON (((24786.75 46…\n\n\n163\n4\nALJUNIED\nGLSZ04\nN\nGEYLANG\nGL\nCENTRAL REGION\nCR\n83AFAB768B6B2B66\n2014-12-05\n33592.58\n32970.83\n7100.699\n2959368\n147\n40\nMULTIPOLYGON (((34449.13 33…\n\n\n182\n3\nTAMPINES WEST\nTMSZ03\nN\nTAMPINES\nTM\nEAST REGION\nER\n2E3EA3D1BBF9A601\n2014-12-05\n39421.66\n36739.21\n8058.336\n3475210\n5\n38\nMULTIPOLYGON (((39918.43 35…\n\n\n199\n4\nBEDOK NORTH\nBDSZ04\nN\nBEDOK\nBD\nEAST REGION\nER\nA2254301F85C1EDF\n2014-12-05\n39429.21\n34737.62\n8414.962\n3203663\n18\n38\nMULTIPOLYGON (((40284.24 35…\n\n\n167\n5\nFRANKEL\nBDSZ05\nN\nBEDOK\nBD\nEAST REGION\nER\nB34F041CC4B050EC\n2014-12-05\n37694.55\n33007.27\n8750.386\n4297141\n56\n36\nMULTIPOLYGON (((36551.53 31…\n\n\n272\n3\nSENGKANG TOWN CENTRE\nSESZ03\nN\nSENGKANG\nSE\nNORTH-EAST REGION\nNER\n5A2D0E9E6B285069\n2014-12-05\n35163.81\n41501.14\n5216.401\n1455508\n5\n33\nMULTIPOLYGON (((35615.75 40…\n\n\n193\n8\nYUNNAN\nJWSZ08\nN\nJURONG WEST\nJW\nWEST REGION\nWR\nD3B6116B19FF864D\n2014-12-05\n12593.14\n36299.93\n7192.209\n2206305\n24\n32\nMULTIPOLYGON (((12670.56 35…\n\n\n177\n3\nHONG KAH\nJWSZ03\nN\nJURONG WEST\nJW\nWEST REGION\nWR\n714E35D7866DC63D\n2014-12-05\n15507.93\n36890.28\n5589.785\n1793464\n14\n30\nMULTIPOLYGON (((16296.05 36…\n\n\n108\n6\nBEDOK SOUTH\nBDSZ06\nN\nBEDOK\nBD\nEAST REGION\nER\n1E89C4218E6421C2\n2014-12-05\n40379.42\n33744.22\n7811.589\n2997307\n11\n29\nMULTIPOLYGON (((39362.15 32…\n\n\n\n\n\nBelow we filter for subzones without any preschools. The results are striking - over 100 subzones have zero coverage.\n\nDT::datatable(mpsz %&gt;% filter(preschool_count == 0), class= \"display\") %&gt;%\n  formatStyle(\n    columns = colnames(mpsz), \n    fontSize = '12px', \n    fontFamily = 'Helvetica', \n    lineHeight = '1'\n  )\n\n\n\n\n\nIn the code chunk below, another geoprocessing function of sf package called st_area() is used to derive the area of each planning subzone.\n\nmpsz&lt;- mpsz %&gt;% \n  mutate(Area = st_area(mpsz),\n         preschool_density = preschool_count/Area*1000000)\n\nThe following table shows the 10 subzones with the highest preschool density:\n\nkable(mpsz %&gt;% \n        top_n(10,preschool_density) %&gt;%\n        arrange(desc(preschool_density)))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOBJECTID\nSUBZONE_NO\nSUBZONE_N\nSUBZONE_C\nCA_IND\nPLN_AREA_N\nPLN_AREA_C\nREGION_N\nREGION_C\nINC_CRC\nFMEL_UPD_D\nX_ADDR\nY_ADDR\nSHAPE_Leng\nSHAPE_Area\nlistings_count\npreschool_count\nArea\npreschool_density\ngeometry\n\n\n\n\n27\n8\nCECIL\nDTSZ08\nY\nDOWNTOWN CORE\nDT\nCENTRAL REGION\nCR\n65AA82AF6F4D925D\n2014-12-05\n29730.20\n29011.33\n2116.0947\n196619.86\n10\n7\n196619.86 [m^2]\n35.60169 [1/m^2]\nMULTIPOLYGON (((29808.18 28…\n\n\n278\n3\nMANDAI ESTATE\nMDSZ03\nN\nMANDAI\nMD\nNORTH REGION\nNR\nF6266F7368DBB9AB\n2014-12-05\n27082.70\n45367.46\n1633.7084\n143137.94\n1\n5\n143137.94 [m^2]\n34.93134 [1/m^2]\nMULTIPOLYGON (((27119.56 45…\n\n\n291\n3\nSEMBAWANG CENTRAL\nSBSZ03\nN\nSEMBAWANG\nSB\nNORTH REGION\nNR\n772A64AB9A93FC3A\n2014-12-05\n26268.73\n47558.08\n3955.1176\n962437.40\n3\n27\n962437.40 [m^2]\n28.05377 [1/m^2]\nMULTIPOLYGON (((26311.14 46…\n\n\n37\n4\nPHILLIP\nDTSZ04\nY\nDOWNTOWN CORE\nDT\nCENTRAL REGION\nCR\n615D4EDDEF809F8E\n2014-12-05\n29706.72\n29744.91\n871.5549\n39437.94\n2\n1\n39437.94 [m^2]\n25.35630 [1/m^2]\nMULTIPOLYGON (((29814.11 29…\n\n\n253\n3\nSERANGOON NORTH\nSGSZ03\nN\nSERANGOON\nSG\nNORTH-EAST REGION\nNER\nC685042EC58E5C55\n2014-12-05\n32458.80\n39597.64\n3610.7324\n684704.30\n3\n17\n684704.30 [m^2]\n24.82824 [1/m^2]\nMULTIPOLYGON (((32860.5 397…\n\n\n272\n3\nSENGKANG TOWN CENTRE\nSESZ03\nN\nSENGKANG\nSE\nNORTH-EAST REGION\nNER\n5A2D0E9E6B285069\n2014-12-05\n35163.81\n41501.14\n5216.4005\n1455507.86\n5\n33\n1455507.86 [m^2]\n22.67250 [1/m^2]\nMULTIPOLYGON (((35615.75 40…\n\n\n290\n3\nWOODLANDS EAST\nWDSZ03\nN\nWOODLANDS\nWD\nNORTH REGION\nNR\nC90769E43EE6B0F2\n2014-12-05\n24506.64\n46991.63\n6603.6083\n2553463.72\n10\n54\n2553463.72 [m^2]\n21.14775 [1/m^2]\nMULTIPOLYGON (((24786.75 46…\n\n\n118\n2\nKATONG\nMPSZ02\nN\nMARINE PARADE\nMP\nCENTRAL REGION\nCR\n55705659E2A91D11\n2014-12-05\n35680.90\n32176.35\n5062.8149\n1078992.03\n58\n22\n1078992.03 [m^2]\n20.38940 [1/m^2]\nMULTIPOLYGON (((36317.74 32…\n\n\n306\n2\nMIDVIEW\nWDSZ02\nN\nWOODLANDS\nWD\nNORTH REGION\nNR\n42D5F52D334C615F\n2014-12-05\n23349.76\n46841.11\n4159.2014\n936415.53\n0\n19\n936415.53 [m^2]\n20.29014 [1/m^2]\nMULTIPOLYGON (((23820.19 46…\n\n\n207\n2\nKEAT HONG\nCKSZ02\nN\nCHOA CHU KANG\nCK\nWEST REGION\nWR\n8ADEB58B9C197CD0\n2014-12-05\n18333.67\n39720.62\n4680.7833\n1143813.67\n1\n23\n1143813.67 [m^2]\n20.10817 [1/m^2]\nMULTIPOLYGON (((18700.53 39…\n\n\n\n\n\nLet’s visualize the preschool_density using ggplot2:\n\nggplot(data=mpsz,\n       aes(x=as.numeric(preschool_density)))+\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill = \"#93A4CC\")+\n  theme_classic()+\n  labs(title = \"Pre-school Distribution Across Singapore Is Highly Uneven\",\n       subtitle= \"Over 100 planning subzones have no pre-schools, while most subzones show low \\ndensity of 0-5 per km². Only two subzones have high density exceeding 30 per km²\",\n       x = \"Pre-school density (per km sq)\",\n       y = \"Frequency\")+\n  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +\n  theme(plot.title = element_text(face=\"bold\",size = 11),\n        plot.subtitle = element_text(size=10),\n        panel.background = element_rect(fill = \"#f6f6f6\"),\n        plot.background = element_rect(fill = \"#f6f6f6\",color = NA),\n        plot.margin = margin(20, 30, 20, 20, \"pt\")) # top, right, bottom, left\n\n\n\n\n\n\n\n\n\nggplot(data=mpsz, \n       aes(y = preschool_count, \n           x= as.numeric(preschool_density)))+\n  geom_point(aes(color=REGION_N)) +\n  geom_text_repel(aes(label = SUBZONE_N, color = REGION_N),\n                   size = 3,\n                   max.overlaps = 5)+\n  labs(title = \"Pre-school Distribution Across Singapore's Planning Subzones\",\n       subtitle = \"East and North regions dominate high-density areas while most subzones remain underserved.\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")+\n  theme_classic()+\n  theme(plot.title = element_text(face=\"bold\",size = 11),\n        plot.subtitle = element_text(size=10),\n        panel.background = element_rect(fill = \"#f6f6f6\"),\n        plot.background = element_rect(fill = \"#f6f6f6\",color = NA),\n        legend.background = element_rect(fill = \"#f6f6f6\"),\n        legend.position = 'bottom',\n        legend.key.size = unit(0.2, \"cm\"),\n        legend.title = element_text(size = 7),\n        legend.text = element_text(size = 7),)"
  },
  {
    "objectID": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_a.html#reference",
    "href": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_a.html#reference",
    "title": "Hands-on 1.a: Geospatial Data Science with R",
    "section": "8 Reference",
    "text": "8 Reference\n\nKam, T.S. (2025). Geospatial Data Science with R"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "",
    "section": "",
    "text": "Linkedin: johsuan-h\nEmail: johsuan.h@gmail.com\n\n\n\n\nAbout\nHi, I’m Johsuan (Doreen) Huang, a finance and accounting professional with a passion for turning data into actionable insights.\nThis website was created as part of the SMU MITB course ISSS626: Geospatial Analytics & Application. Thanks for visiting. I hope you enjoy exploring this learning journey with me!\n\n- Experience -\n\nRegional Key Account Intern | Shiseido APAC, Singapore | 2025\nFinancial Accountant | 10/10 Group, Taipei | 2022-2024\nSenior Audit Associate | PwC, Taipei | 2020-2022\n\n\n\n- Education -\n\nMaster of IT in Business (Data & Analytics) | Singapore Management University\nBachelor of Finance | National Chengchi University\n\n\n\n\n\nHere are my latest posts :\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on 1.b: Thematic Mapping and GeoVisualisation with R\n\n\n\n\n\n\nAug 26, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on 1.a: Geospatial Data Science with R\n\n\n\n\n\n\nAug 24, 2025\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_b.html",
    "href": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_b.html",
    "title": "Hands-on 1.b: Thematic Mapping and GeoVisualisation with R",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to plot functional and truthful choropleth maps by using an R package called tmap package"
  },
  {
    "objectID": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_b.html#handling-geospatial-data",
    "href": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_b.html#handling-geospatial-data",
    "title": "Hands-on 1.b: Thematic Mapping and GeoVisualisation with R",
    "section": "3.1 Handling Geospatial Data",
    "text": "3.1 Handling Geospatial Data\nTo retrieve the SZ, PA, region information, we first need to define a function to extract values from the HTML description:\n\nextract_kml_field &lt;- function(html_text, field_name) {\n  if (is.na(html_text) || html_text == \"\") return(NA_character_) # check if text is na\n  \n  page &lt;- read_html(html_text)\n  rows &lt;- page %&gt;% html_elements(\"tr\") # find table row element \n  \n  value &lt;- rows %&gt;%\n    # looks through each row to find table header == field_name and\n    keep(~ html_text2(html_element(.x, \"th\")) == field_name) %&gt;% \n    html_element(\"td\") %&gt;% # extract table data\n    html_text2() # and then extract clean text context\n  \n  if (length(value) == 0) NA_character_ else value # return value if is not NA\n}\n\nAnd then we use the function just created to extract structured information from mpsz descriptions and creates new, clean columns:\n\nmpsz &lt;- mpsz %&gt;%\n  mutate(REGION_N = map_chr(Description,extract_kml_field,\"REGION_N\"),\n         PLN_AREA_N = map_chr(Description,extract_kml_field,\"PLN_AREA_N\"),\n         SUBZONE_N = map_chr(Description, extract_kml_field, \"SUBZONE_N\"),\n         SUBZONE_C = map_chr(Description, extract_kml_field, \"SUBZONE_C\"))%&gt;%\n  select(-Name, -Description) %&gt;% # unselect columns \"Name\" and \"Description\"\n  relocate(geometry, .after = last_col()) # move the \"geometry\" to the end\n\nLet’s examine the data again:\n\nkable(head(mpsz))\n\n\n\n\n\n\n\n\n\n\n\nREGION_N\nPLN_AREA_N\nSUBZONE_N\nSUBZONE_C\ngeometry\n\n\n\n\nCENTRAL REGION\nBUKIT MERAH\nDEPOT ROAD\nBMSZ12\nMULTIPOLYGON Z (((103.8145 …\n\n\nCENTRAL REGION\nBUKIT MERAH\nBUKIT MERAH\nBMSZ02\nMULTIPOLYGON Z (((103.8221 …\n\n\nCENTRAL REGION\nOUTRAM\nCHINATOWN\nOTSZ03\nMULTIPOLYGON Z (((103.8438 …\n\n\nCENTRAL REGION\nDOWNTOWN CORE\nPHILLIP\nDTSZ04\nMULTIPOLYGON Z (((103.8496 …\n\n\nCENTRAL REGION\nDOWNTOWN CORE\nRAFFLES PLACE\nDTSZ05\nMULTIPOLYGON Z (((103.8525 …\n\n\nCENTRAL REGION\nOUTRAM\nCHINA SQUARE\nOTSZ04\nMULTIPOLYGON Z (((103.8486 …"
  },
  {
    "objectID": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_b.html#data-preperation",
    "href": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_b.html#data-preperation",
    "title": "Hands-on 1.b: Thematic Mapping and GeoVisualisation with R",
    "section": "4.1 Data Preperation",
    "text": "4.1 Data Preperation\nThe current age groups in the data are too sparse for meaningful analysis. Hence, regrouping is needed for further analysis.\nHere are the definition of three age groups we are going to regroup:\n\nYOUNG: age group 0 to 4 until age groyup 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\n\n\npopdata2024 &lt;- popdata %&gt;%\n  group_by(PA,SZ,AG) %&gt;%\n  summarise(POP = sum(as.numeric(Pop),na.rm = TRUE),.groups = \"drop\") %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from = AG,\n              values_from = POP) \n\n\n# Define Young/EA/Aged First\nYoung &lt;- c(\"0_to_4\",\"5_to_9\", \"10_to_14\", \"15_to_19\", \"20_to_24\")\nEA &lt;- c(\"25_to_29\", \"30_to_34\",\"35_to_39\", \"40_to_44\", \"45_to_49\", \"50_to_54\", \"55_to_59\",\"60_to_64\")\nAged &lt;- c(\"65_to_69\", \"70_to_74\", \"75_to_79\", \"80_to_84\", \"85_to_89\", \"90_and_over\")\n\n# Becareful to only count non-na!\npopdata2024 &lt;- popdata2024 %&gt;%\n  mutate(YOUNG = rowSums(across(all_of(Young)),na.rm = TRUE),\n        `ECONOMY ACTIVE` = rowSums(across(all_of(EA)),na.rm = TRUE),\n        AGED=rowSums(across(all_of(Aged)),na.rm = TRUE),\n        TOTAL = rowSums(.[3:21],na.rm = TRUE))\n\nAdditionally, since we also want to evaluate the dependent ratio in different SZ / PA, we also need to create dependency ratio metric:\n\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\npopdata2024 &lt;- popdata2024 %&gt;%\n  mutate(DEPENDENCY = (YOUNG + AGED)/`ECONOMY ACTIVE`) %&gt;%\n  select(PA,SZ,YOUNG,`ECONOMY ACTIVE`,AGED, TOTAL, DEPENDENCY)%&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\n\n# check if there are any NAs?\ncolSums(is.na(popdata2024))\n\n            PA             SZ          YOUNG ECONOMY ACTIVE           AGED \n             0              0              0              0              0 \n         TOTAL     DEPENDENCY \n             0              0"
  },
  {
    "objectID": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_b.html#join-the-attribute-data-and-geospatial-data",
    "href": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_b.html#join-the-attribute-data-and-geospatial-data",
    "title": "Hands-on 1.b: Thematic Mapping and GeoVisualisation with R",
    "section": "4.2 Join the attribute data and geospatial data",
    "text": "4.2 Join the attribute data and geospatial data\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the current values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase in MPSZ\n\npopdata2024 &lt;- popdata2024 %&gt;%\n  mutate(across(c(PA, SZ), toupper))\n\nmpsz_pop2024 &lt;- left_join(mpsz, popdata2024,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\nAnd then, we export rds file for future use:\n\nwrite_rds(mpsz_pop2024, \"Data/mpsz_pop2024.rds\")"
  },
  {
    "objectID": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_b.html#plotting-choropleth-map-quickly-using-qtm",
    "href": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_b.html#plotting-choropleth-map-quickly-using-qtm",
    "title": "Hands-on 1.b: Thematic Mapping and GeoVisualisation with R",
    "section": "5.1 Plotting choropleth map quickly using qtm()",
    "text": "5.1 Plotting choropleth map quickly using qtm()\n\ntmap_mode(\"view\") # interactive mode\nqtm(shp = mpsz_pop2024,\n    fill = \"DEPENDENCY\")+\n    tm_layout(bg.color = \"#f6f6f6\")"
  },
  {
    "objectID": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_b.html#customizing-choropleth-map-using-tmaps-elements",
    "href": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_b.html#customizing-choropleth-map-using-tmaps-elements",
    "title": "Hands-on 1.b: Thematic Mapping and GeoVisualisation with R",
    "section": "5.2 Customizing choropleth map using tmap’s elements",
    "text": "5.2 Customizing choropleth map using tmap’s elements\n\ntmap_mode(\"plot\")\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill=\"DEPENDENCY\",\n              col = \"gray40\",\n              lwd = 0.5,\n              fill.scale = tm_scale_intervals(style=\"quantile\",\n                                              n=5,\n                                              values = \"brewer.blues\"),\n              fill.legend = tm_legend(title = \"Dependency ratio\",\n                                      orientation = \"landscape\",\n                                      frame = FALSE)) +\n  tm_title(\"Distribution of Dependency Ratio by planning subzone\")+\n  tm_layout(frame = TRUE,\n            outer.bg.color = \"#f6f6f6\",\n            inner.margins = c(0.25, 0.05, 0.05, 0.05))+ #c(bottom, left, top, right)\n  tm_credits(\"Source: \\n 1. Planning Sub-zone boundary from URA\\n 2. Population data from DOS\",\n             position = tm_pos_in(\"left\", \"bottom\"),\n             #bg.color = rgb(1, 1, 1, 0.7),\n             size = 0.6)+\n  tm_compass(type = \"4star\", size = 1.3, text.size=0.6)+\n  tm_scalebar(position = tm_pos_in(\"right\", \"bottom\")) +\n  tm_grid(alpha=0.1) #grid for longtitude and latitude"
  },
  {
    "objectID": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_b.html#introducing-tmap-elements-one-by-one",
    "href": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_b.html#introducing-tmap-elements-one-by-one",
    "title": "Hands-on 1.b: Thematic Mapping and GeoVisualisation with R",
    "section": "5.3 Introducing tmap() elements one by one",
    "text": "5.3 Introducing tmap() elements one by one\n\n5.3.1 Base Map with Shape\nThe basic building block of tmap is tm_shape() followed by one or more layer elemments such as tm_polygons(), tm_symbols(), tm_lines(), tm_raster() and tm_text()\n\ntm_shape(mpsz_pop2024)+\n  tm_polygons()+\n  \n  # Layout setting\n  tm_layout(frame = FALSE,\n            bg.color = \"#f6f6f6\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nBy default, it plots areas of polygons in light gray (gray85) and polygons borders in slightly dark gray (gray25).\n\n\n\n\n5.3.2 Choropleth Map Using tm_polygons()\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons().\n\ntm_shape(mpsz_pop2024)+\n  tm_polygons(fill = \"DEPENDENCY\")+\n  \n  # Layout setting\n  tm_layout(bg.color = \"#f6f6f6\",frame = FALSE)+\n  tm_legend(frame = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from tm_polygons():\n\n\n\n\nThe default interval binning used to draw the choropleth map is called “pretty”.\nThe default colour scheme used is blues3 of ColorBrewer.\nBy default, Missing value will be shaded in grey.\n\n\n\n\n\n5.3.2 Choropleth Map Using tm_fill() and tm_border()\nActually, tm_polygons() is a wraper of tm_fill() and tm_border(). tm_fill() shades the polygons by using the default colour scheme and tm_borders() adds the borders of the polygon features onto the choropleth map.\nThe code chunk below draws a choropleth map by using tm_fill() alone.\n\ntm_shape(mpsz_pop2024)+\n  tm_fill(\"DEPENDENCY\")+\n  \n  # Layout setting\n  tm_layout(frame = FALSE,\n            bg.color = \"#f6f6f6\")+\n  tm_legend(frame = FALSE, orientation = \"landscape\")\n\n\n\n\n\n\n\n\nTo add the boundary of the planning subzones, tm_borders() will be used as shown in the code chunk below:\n\ntm_shape(mpsz_pop2024)+\n  tm_fill(\"DEPENDENCY\")+\n  tm_borders()+\n  \n  # Layout setting\n  tm_layout(frame = FALSE,\n            bg.color = \"#f6f6f6\")+\n  tm_legend(frame = FALSE)\n\n\n\n\n\n\n\n\nNow, the border shows up!\nThe fill_alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\nBeside fill_alpha argument, there are three other arguments for tm_borders(), they are:\n\ncol = border colour,\nlwd = border line width. The default is 1, and\nlty = border line type. The default is “solid”. Other types include “dashed”, “dotted”,\n\n\ntm_shape(mpsz_pop2024)+\n  tm_fill(\"DEPENDENCY\")+\n  tm_borders(col = \"grey30\",\n             lty=\"dotted\",\n             lwd = 0.6)+\n  \n  # Layout setting\n  tm_layout(frame = FALSE,\n            bg.color = \"#f6f6f6\")+\n  tm_legend(frame = FALSE)"
  },
  {
    "objectID": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_b.html#data-classification-methods-of-tmap",
    "href": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_b.html#data-classification-methods-of-tmap",
    "title": "Hands-on 1.b: Thematic Mapping and GeoVisualisation with R",
    "section": "5.4 Data classification methods of tmap",
    "text": "5.4 Data classification methods of tmap\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\n\n5.4.1 DIY: Plotting choropleth maps with built-in methods\n\nquantileequaljenks (natural break)fisherKmeanshclust\n\n\nUse when:\n\nYou want each class to contain the same number of areas (good for choropleth balance).\nYour data is skewed but you want visual balance.\nYou’re exploring data and don’t have predefined thresholds.\n\nCons:\n\nClass ranges might be uneven and misleading if values cluster.\n\n\ntm_shape(mpsz_pop2024)+\n  tm_polygons(\"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(style = \"quantile\",\n                                              n=5),\n              fill_alpha = 1)+\n  # Layout setting\n  tm_layout(frame = FALSE,\n            bg.color = \"#f6f6f6\")+\n  tm_legend(frame = FALSE)\n\n\n\n\n\n\n\n\n\n\nThe “equal” style divides the range of the variable into n parts.\nUse when:\n\nYour data is roughly uniform.\nYou want easy-to-interpret intervals (e.g. 0–20, 20–40, etc.).\n\nCons:\n\nCan be misleading if most data points are in a small value range.\n\n\ntm_shape(mpsz_pop2024)+\n  tm_polygons(\"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(style = \"equal\",\n                                              n=5))+\n  # Layout setting\n  tm_layout(frame = FALSE,\n            bg.color = \"#f6f6f6\")+\n  tm_legend(frame = FALSE)\n\n\n\n\n\n\n\n\n\n\nUse when:\n\nYou want to minimize within-class variance and maximize between-class variance.\nData has natural groupings.\nYou’re visualizing clustered values.\n\nCons:\n\nBreaks may change across datasets, so hard to compare maps.\n\n\ntm_shape(mpsz_pop2024)+\n  tm_polygons(\"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(style = \"jenks\",\n                                              n=5))+\n  # Layout setting\n  tm_layout(frame = FALSE,\n            bg.color = \"#f6f6f6\")+\n  tm_legend(frame = FALSE)\n\n\n\n\n\n\n\n\n\n\nThe “fisher” style uses the algorithm proposed by W. D. Fisher (1958) and discussed by Slocum et al. (2005) as the Fisher-Jenks algorithm.\nThis style will subsample by default for more than 3000 observations. This style should always be preferred to “jenks” as it uses the original Fortran code and runs nested for-loops much faster.\n\ntm_shape(mpsz_pop2024)+\n  tm_polygons(\"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(style = \"fisher\",\n                                              n=5))+\n  # Layout setting\n  tm_layout(frame = FALSE,\n            bg.color = \"#f6f6f6\")+\n  tm_legend(frame = FALSE)\n\n\n\n\n\n\n\n\n\n\nBreaks based on k-means clustering.\n\ntm_shape(mpsz_pop2024)+\n  tm_polygons(\"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(style = \"kmeans\",\n                                              n=5))+\n  # Layout setting\n  tm_layout(frame = FALSE,\n            bg.color = \"#f6f6f6\")+\n  tm_legend(frame = FALSE)\n\n\n\n\n\n\n\n\n\n\nThe “hclust” style uses hclust to generate the breaks using hierarchical clustering\n\ntm_shape(mpsz_pop2024)+\n  tm_polygons(\"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(style = \"hclust\",n=5))+\n  # Layout setting\n  tm_layout(frame = FALSE,\n            bg.color = \"#f6f6f6\")+\n  tm_legend(frame = FALSE)\n\n\n\n\n\n\n\n\n\n\n\nNotice that the distribution of quantile data classification method are more evenly distributed then equal data classification method.\n\n\n5.4.2 DIY: Plotting Maps Using fisher method with different # of classes\n\nn = 3n = 5n = 8n = 10n = 15n = 20\n\n\n\ntm_shape(mpsz_pop2024)+\n  tm_polygons(\"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(style = \"fisher\",\n                                              n=3))+\n  # Layout setting\n  tm_layout(frame = FALSE,\n            bg.color = \"#f6f6f6\")+\n  tm_legend(frame = FALSE)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2024)+\n  tm_polygons(\"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(style = \"fisher\",\n                                              n=5))+\n  # Layout setting\n  tm_layout(frame = FALSE,\n            bg.color = \"#f6f6f6\")+\n  tm_legend(frame = FALSE)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2024)+\n  tm_polygons(\"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(style = \"fisher\",\n                                              n=8))+\n  # Layout setting\n  tm_layout(frame = FALSE,\n            bg.color = \"#f6f6f6\")+\n  tm_legend(frame = FALSE)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2024)+\n  tm_polygons(\"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(style = \"fisher\",\n                                              n=10))+\n  # Layout setting\n  tm_layout(frame = FALSE,\n            bg.color = \"#f6f6f6\")+\n  tm_legend(frame = FALSE)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2024)+\n  tm_polygons(\"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(style = \"fisher\",\n                                              n=15))+\n  # Layout setting\n  tm_layout(frame = FALSE,\n            bg.color = \"#f6f6f6\")+\n  tm_legend(frame = FALSE)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2024)+\n  tm_polygons(\"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(style = \"fisher\",\n                                              n=20))+\n  # Layout setting\n  tm_layout(frame = FALSE,\n            bg.color = \"#f6f6f6\")+\n  tm_legend(frame = FALSE)\n\n\n\n\n\n\n\n\n\n\n\nIn my opinion, using n = 8 provides a well-balanced distinction between low and high subzones, making the differences more visually apparent.\n\n\n5.4.3 Plotting choropleth map with custome break\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument to the tm_scale_intervals(). \nIt is important to note that, in tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points.\n\nsummary(mpsz_pop2024$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6750  0.7283  0.7563  0.8139 10.0000      94 \n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 10. Our breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 100)\n\ntm_shape(mpsz_pop2024)+\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                breaks = c(0, 0.60, 0.70, 0.80, 0.90, 10))\n              )+\n  \n    # Layout setting\n  tm_layout(frame = FALSE,\n            bg.color = \"#f6f6f6\")+\n  tm_legend(frame = FALSE)"
  },
  {
    "objectID": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_b.html#color-scheme",
    "href": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_b.html#color-scheme",
    "title": "Hands-on 1.b: Thematic Mapping and GeoVisualisation with R",
    "section": "5.5 Color Scheme",
    "text": "5.5 Color Scheme\ntmap supports colour ramps either defined by the user or a set of predefined colour ramps from the cols4all package.\ncols4all provide a shiny dashboard for users to choose the palette\nlibrary(cols4all)\nc4a_gui()\n\n5.5.1 Cols4all Palette\n\nbrewer.greenscarto.purpcarto.magentacarto.teal\n\n\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"brewer.greens\")) +\n  tm_borders(fill_alpha = 0.5)+\n\n  # Layout setting\n  tm_layout(frame = FALSE,\n            bg.color = \"#f6f6f6\")+\n  tm_legend(frame = FALSE)\n\n\n\n\n\n\n\n\nTo reverse the colour shading, add a “-” prefix.\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"-brewer.greens\")) +\n  tm_layout(frame = FALSE,\n            bg.color = \"#f6f6f6\")+\n  tm_legend(frame = FALSE)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"carto.purp\")) +\n  tm_borders(fill_alpha = 0.5)+\n\n  # Layout setting\n  tm_layout(frame = FALSE,\n            bg.color = \"#f6f6f6\")+\n  tm_legend(frame = FALSE)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"carto.magenta\")) +\n  tm_borders(fill_alpha = 0.5)+\n\n  # Layout setting\n  tm_layout(frame = FALSE,\n            bg.color = \"#f6f6f6\")+\n  tm_legend(frame = FALSE)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"carto.teal\")) +\n  tm_borders(fill_alpha = 0.5)+\n\n  # Layout setting\n  tm_layout(frame = FALSE,\n            bg.color = \"#f6f6f6\")+\n  tm_legend(frame = FALSE)"
  },
  {
    "objectID": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_b.html#cartographic-furniture",
    "href": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_b.html#cartographic-furniture",
    "title": "Hands-on 1.b: Thematic Mapping and GeoVisualisation with R",
    "section": "5.6 Cartographic Furniture",
    "text": "5.6 Cartographic Furniture\nBeside map style, tmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nIn the code chunk below, tm_compass(), tm_scale_bar(), tm_grid() and tm_credit()are used to add compass, scale bar, grid lines and data sources onto the choropleth map.\n\ntm_shape(mpsz_pop2024)+\n  tm_polygons(fill=\"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(style = \"fisher\",\n                                              n = 8,\n                                              values = \"carto.purp\"),\n              fill.legend = tm_legend(title = \"Dependency Ratio\"))+\n  tm_compass(type = '4star',size=2, text.size = 0.6)+\n  tm_scalebar()+\n  tm_grid(lwd=0.1, alpha = 0.8)+\n  tm_credits(\"Source: data.gov.sg & singstat\",\n             position = c(\"left\", \"bottom\"))+\n  tm_layout(outer.bg.color =\"#f6f6f6\",\n            inner.margins = c(0.15, 0.05, 0.05, 0.05))+ #c(bottom, left, top, right)\n  tm_legend(frame = FALSE,\n            orientation = \"landscape\")"
  },
  {
    "objectID": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_b.html#map-layout",
    "href": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_b.html#map-layout",
    "title": "Hands-on 1.b: Thematic Mapping and GeoVisualisation with R",
    "section": "5.7 Map Layout",
    "text": "5.7 Map Layout\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style().\nThe styles include: “white” (tmap default), “gray”, “cobalt”, “albatross”, “beaver”, “bw”, “classic”, “watercolor”,“natural”\n\nclassicnaturalbeavergraycolbalt\n\n\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"-brewer.greens\")) + \n  tm_borders(fill_alpha = 0.5) + \n  tm_compass(type = '8star',size=2, text.size = 0.6)+\n  tmap_style(\"classic\")+\n  tm_layout(outer.bg.color =\"#f6f6f6\")+\n  tm_legend(frame = FALSE,\n            orientation = \"landscape\")\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"-brewer.greens\")) + \n  tm_borders(fill_alpha = 0.5) + \n  tm_compass(type = '8star',size=2, text.size = 0.6)+\n  tmap_style(\"natural\")+\n  tm_legend(frame = FALSE,\n            orientation = \"landscape\",\n            bg.color = NA)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5)) + \n  tm_borders(fill_alpha = 0.5) + \n  tm_compass(type = '8star',size=2, text.size = 0.6)+\n  tmap_style(\"beaver\")+\n  tm_legend(frame = FALSE,\n            orientation = \"landscape\",\n            bg.color = NA)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5)) + \n  tm_borders(fill_alpha = 0.5) + \n  tm_compass(type = '8star',size=2, text.size = 0.6)+\n  tmap_style(\"gray\")+\n  tm_legend(frame = FALSE,\n            orientation = \"landscape\",\n            bg.color = NA)\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5)) + \n  tm_borders(fill_alpha = 0.5) + \n  tm_compass(type = '8star',size=2, text.size = 0.6)+\n  tmap_style(\"cobalt\")+\n  tm_legend(frame = FALSE,\n            orientation = \"landscape\",\n            bg.color = NA)\n\n\n\n\n\n\n\n\n\n\n\nTo reset the default style, refer to the code chunk below:\n\ntmap_style(\"white\")"
  },
  {
    "objectID": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_b.html#by-assigning-multiple-arguments",
    "href": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_b.html#by-assigning-multiple-arguments",
    "title": "Hands-on 1.b: Thematic Mapping and GeoVisualisation with R",
    "section": "6.1 By Assigning multiple arguments",
    "text": "6.1 By Assigning multiple arguments\n\ntm_shape(mpsz_pop2024) + \n  tm_polygons(\n    fill = c(\"YOUNG\", \"AGED\"),\n    fill.legend = \n      tm_legend(position = tm_pos_in(\n        \"right\", \"bottom\")),\n    fill.scale = tm_scale_intervals(\n      style = \"equal\", \n      n = 5,\n      values = \"brewer.blues\")) +\n  tm_layout(outer.bg.color =\"#f6f6f6\",\n            bg.color = \"white\",\n            inner.margins = c(0.25, 0.05, 0.05, 0.05) #c(bottom, left, top, right)\n            )+\n  tm_legend(frame = FALSE,\n            orientation = \"landscape\")+\n  tm_title(\"Demographic Overview: Young vs. Aged Residents in Singapore\",\n           size = 1, \n           just = \"center\")"
  },
  {
    "objectID": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_b.html#by-tmap_arrange-for-a-grid-layout",
    "href": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_b.html#by-tmap_arrange-for-a-grid-layout",
    "title": "Hands-on 1.b: Thematic Mapping and GeoVisualisation with R",
    "section": "6.2 By tmap_arrange() for a grid layout",
    "text": "6.2 By tmap_arrange() for a grid layout\n\nyoungmap &lt;- tm_shape(mpsz_pop2024)+ \n  tm_polygons(fill = \"YOUNG\",\n              fill.legend = tm_legend(\n                position = tm_pos_in(\n                  \"right\", \"bottom\"),\n                  item.height = 0.8),\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\", \n                values = \"brewer.blues\")) +\n  tm_title(\"Distribution of young population\",size=1, just=\"center\")+\n  tm_layout(outer.bg.color =\"#f6f6f6\",\n            bg.color = \"white\",\n            inner.margins = c(0.25, 0.05, 0.05, 0.05) #c(bottom, left, top, right)\n            )\n                \nagedmap &lt;- tm_shape(mpsz_pop2024)+ \n  tm_polygons(fill = \"AGED\",\n              fill.legend = tm_legend(\n                position = tm_pos_in(\n                  \"right\", \"bottom\"),\n                item.height = 0.8),\n              fill.scale = tm_scale_intervals(\n              style = \"quantile\", \n              values = \"brewer.blues\")) +\n  tm_title(\"Distribution of aged population\",size=1, just=\"center\")+\n  tm_layout(outer.bg.color =\"#f6f6f6\",\n            bg.color = \"white\",\n            inner.margins = c(0.25, 0.05, 0.05, 0.05) #c(bottom, left, top, right)\n            )\n\ntmap_arrange(youngmap, agedmap, \n             asp=1, #aspect ratio\n             ncol=2,\n             outer.margins = 0.05)"
  },
  {
    "objectID": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_b.html#by-tm_facets",
    "href": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_b.html#by-tm_facets",
    "title": "Hands-on 1.b: Thematic Mapping and GeoVisualisation with R",
    "section": "6.3 By tm_facets()",
    "text": "6.3 By tm_facets()\nIn this example, multiple small choropleth maps are created by using tm_facets():\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n            fill.scale = tm_scale_intervals(\n            style = \"quantile\",\n            n = 5,\n            values = \"brewer.blues\")) + \n  tm_facets(by = \"REGION_N\",\n            nrow = 2, ncol = 3,\n            free.coords = TRUE,\n            drop.units = TRUE) + \n  tm_layout(legend.show = TRUE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20,\n            outer.bg.color = \"#f6f6f6\")"
  },
  {
    "objectID": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_b.html#highlight-outliers",
    "href": "Hands-on/Hands-on-Ex01/Hands-on-Ex01_b.html#highlight-outliers",
    "title": "Hands-on 1.b: Thematic Mapping and GeoVisualisation with R",
    "section": "8.1 Highlight Outliers",
    "text": "8.1 Highlight Outliers\nIn the code chunk below, We improve the visual representation further by highlighting and lebaling the outliers on the choropleth map.\n\ntmap_mode(\"plot\")\nmpsz_selected &lt;- mpsz_pop2024 %&gt;%\n  filter(REGION_N == \"CENTRAL REGION\")\n\nstats &lt;- boxplot.stats(mpsz_selected$DEPENDENCY)\n\noutlier_vals &lt;- stats$out\n\noutlier_sf &lt;- mpsz_selected[mpsz_selected$DEPENDENCY %in% outlier_vals, ]\n\ntm_shape(mpsz_selected) +\n  tm_polygons(fill = \"DEPENDENCY\",\n          fill.scale = tm_scale_intervals(\n            style = \"quantile\", \n            values = \"carto.teal\"),\n          fill.legend = tm_legend(),\n          fill.chart = tm_chart_box()) +\n  tm_borders(fill_alpha = 0.5) +\ntm_shape(outlier_sf) +\n  tm_borders(col = \"red\", lwd =2.5, lty = \"solid\") +\n  tm_labels(\"SUBZONE_N\",\n            col = \"white\",\n            bgcol = rgb(0,0,0,0.6),\n            size = 0.4,remove_overlap=TRUE) +\n  tm_layout(asp = 0.8,\n            outer.bg.color = \"#f6f6f6\")"
  }
]